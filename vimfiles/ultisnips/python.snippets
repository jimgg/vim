priority -50


snippet pdb "debug" b
import pdb
pdb.set_trace()
endsnippet


snippet #! "header for python scripts" b
# -*- coding: utf-8 -*-
$0
endsnippet


snippet ifmain "ifmain" b
if __name__ == '__main__':
    ${1:${VISUAL:main()}}
endsnippet


snippet with "with" b
with ${1:expr}`!p snip.rv = " as " if t[2] else ""`${2:var}:
    ${3:${VISUAL:pass}}
${0}
endsnippet


snippet for "for loop" b
for ${1:item} in ${2:iterable}:
    ${3:${VISUAL:pass}}
endsnippet


snippet class "class" b
class ${1:MyClass}(${2:object}):
    ${3:${VISUAL:pass}}
endsnippet


snippet def "function" b
def ${1:function}(`!p
if snip.indent:
    snip.rv = 'self' + (", " if len(t[2]) else "")`${2:arg1}):
    ${3:${VISUAL:pass}}
endsnippet


snippet defc "class method" b
@classmethod
def ${1:function}(`!p
if snip.indent:
    snip.rv = 'cls' + (", " if len(t[2]) else "")`${2:arg1}):
    ${3:${VISUAL:pass}}
endsnippet


snippet defs "static method" b
@staticmethod
def ${1:function}(${2:arg1}):
    ${3:${VISUAL:pass}}
endsnippet


snippet from "from module import name" b
from ${1:module} import ${2:Stuff}
endsnippet


snippet if "If" b
if ${1:condition}:
    ${2:${VISUAL:pass}}
endsnippet

snippet ife "If / Else" b
if ${1:condition}:
    ${2:${VISUAL:pass}}
else:
    ${3:pass}
endsnippet

snippet ifee "If / Elif / Else" b
if ${1:condition}:
    ${2:${VISUAL:pass}}
elif ${3:condition}:
    ${4:pass}
else:
    ${5:pass}
endsnippet


snippet try "Try / Except" b
try:
    ${1:${VISUAL:pass}}
except ${2:Exception} as ${3:e}:
    ${4:raise $3}
endsnippet


snippet trye "Try / Except / Else" b
try:
    ${1:${VISUAL:pass}}
except ${2:Exception} as ${3:e}:
    ${4:raise $3}
else:
    ${5:pass}
endsnippet


snippet tryf "Try / Except / Finally" b
try:
    ${1:${VISUAL:pass}}
except ${2:Exception} as ${3:e}:
    ${4:raise $3}
finally:
    ${5:pass}
endsnippet


snippet tryef "Try / Except / Else / Finally" b
try:
    ${1:${VISUAL:pass}}
except${2: ${3:Exception} as ${4:e}}:
    ${5:raise}
else:
    ${6:pass}
finally:
    ${7:pass}
endsnippet
